(add-load-path "../../tool/")
(load "accumulate.scm")

(define (distinct? items)
  (cond ((null? items) #t)
        ((null? (cdr items)) #t)
        ((member (car items) (cdr items)) #f)
        (else (distinct? (cdr items)))))

(define (combine l . other-lists)
  (define (c l1 l2)
    (accumulate append
                '()
                (map (lambda (i)
                       (map (lambda (j)
                              (if (pair? i)
                                  (append i (list j))
                                  (list i j)))
                            l2))
                     l1)))
  (cond ((null? other-lists) l)
        ((null? (car other-lists)) l)
        (else (apply combine (cons (c l (car other-lists))
                                   (cdr other-lists))))))

(define (multiple-dwelling)
  (map (lambda (result)
         (list (list 'baker (car result))
               (list 'cooper (cadr result))
               (list 'fletcher (caddr result))
               (list 'miller (cadddr result))
               (list 'smith (car (cddddr result)))))
       (filter (lambda (x)
                 (let ((baker (car x))
                       (cooper (cadr x))
                       (fletcher (caddr x))
                       (miller (cadddr x))
                       (smith (car (cddddr x))))
                   (and
                    (distinct? x)
                    (> miller cooper)
                    (not (= (abs (- smith fletcher)) 1))
                    (not (= (abs (- fletcher cooper)) 1))
                    (not (= baker 5))
                    (not (= cooper 1))
                    (not (= fletcher 5))
                    (not (= fletcher 1)))))
               (combine '(1 2 3 4 5)
                        '(1 2 3 4 5)
                        '(1 2 3 4 5)
                        '(1 2 3 4 5)
                        '(1 2 3 4 5)))))

(multiple-dwelling)
