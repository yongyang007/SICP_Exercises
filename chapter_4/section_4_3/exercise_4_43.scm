(define (solve-puzzle)
  (let ((Mary (amb "Moore" "Downing" "Hall" "Barnacle" "Parker")))
    (require (equal? Mary "Moore"))
    (let ((Gabrielle (amb "Moore" "Downing" "Hall" "Barnacle" "Parker")))
      (require (not (equal? Gabrielle "Barnacle")))
      (require (distinct? (list Mary Gabrielle)))
      (let ((Lorna (amb "Moore" "Downing" "Hall" "Barnacle" "Parker")))
        (require (not (equal? Lorna "Moore")))
        (require (distinct? (list Mary Gabrielle Lorna)))
        (let ((Rosalind (amb "Moore" "Downing" "Hall" "Barnacle" "Parker")))
          (require (not (equal? Rosalind "Hall")))
          (require (distinct? (list Mary Gabrielle Lorna Rosalind)))
          (let ((Melissa (amb "Moore" "Downing" "Hall" "Barnacle" "Parker")))
            (require (equal? Melissa "Barnacle"))
            (require (distinct? (list Mary Gabrielle Lorna Rosalind Melissa)))
            (let (Parker (amb Mary Gabrielle Lorna Rosalind Melissa))
              (require )
              (list "Lorna" Lorna))))))))

(define (father daughter yacht) (cons daughter yacht))
(define (daughter father) (car father))
(define (yacht father) (cdr father))

(define (solve-puzzle)
  (let ((Moore (father (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa")
                       (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa"))))
    (require (equal? (daughter Moore) "Mary Ann"))
    (require (equal? (yacht Moore) "Lorna"))
    (let ((Barnacle (father (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa")
                            (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa"))))
      (require (equal? (yacht Barnacle) "Gabrielle"))
      (require (equal? (daughter Barnacle) "Melissa"))
      (let ((Hall (father (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa")
                          (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa"))))
        (require (equal? (yacht Hall) "Rosalind"))
        (require (not (equal? (daughter Hall) (yacht Hall))))
        (require (distinct? (map daughter (list Moore Barnacle Hall))))
        (require (distinct? (map yacht (list Moore Barnacle Hall))))
        (let ((Downing (father (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa")
                               (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa"))))
          (require (equal? (yacht Downing) "Melissa"))
          (require (not (equal? (daughter Downing) (yacht Downing))))
          (require (distinct? (map daughter (list Moore Barnacle Hall Downing))))
          (require (distinct? (map yacht (list Moore Barnacle Hall Downing))))
          (let ((Parker (father (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa")
                                (amb "Mary Ann" "Gabrielle" "Lorna" "Rosalind" "Melissa"))))
            (require (not (equal? (daughter Parker) (yacht Parker))))
            (require (distinct? (map daughter (list Moore Barnacle Hall Downing Parker))))
            (require (distinct? (map yacht (list Moore Barnacle Hall Downing Parker))))
            (let ((Gabrielle-s-father
                   (car (filter
                         (lambda (father) (equal? (daughter father) "Gabrielle"))
                         (list Moore Barnacle Barnacle Hall)))))
              (require (equal? (yacht Gabrielle-s-father) (daughter Parker)))
              (list (list 'Moore (daughter Moore) (yacht Moore))
                    (list 'Barnacle (daughter Barnacle) (yacht Barnacle))
                    (list 'Hall (daughter Hall) (yacht Hall))
                    (list 'Downing (daughter Downing) (yacht Hall))
                    (list 'Parker (daughter Parker) (yacht Parker))))))))))
;; TODO: 验证程序

;; 笔算的结果是Lorna的父亲是Downing

;; 如果去除Mary Ann姓Moore的这个条件的话，Lorna的父亲还有可能是Parker
