(define (add-rat x y)
  (make-rat (+ (* (numer x) (demon y))
               (* (numer y) (demon x)))
            (* (demon x) (demon y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (demon y))
               (* (numer y) (demon x)))
            (* (demon x) (demon y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (demon x) (demon y))))
(define (div-rat x y)
  (make-rat (* (numer x) (demon y))
            (* (demon x) (numer y))))
(define (equal-rat? x y)
  (and (= (numer x) (numer y))
       (= (demon x) (demon y))))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (demon x)))

(define (make-rat n d)
  (cons n d))
(define (numer x)
  (car x))
(define (demon x)
  (cdr x))

                                        ;简化数字版
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g)
          (/ d g))))
