(define (mul-interval x y)
  (let ((x-l (lower-bound x))
        (x-u (upper-bound x))
        (y-l (lower-bound y))
        (y-u (upper-bound y)))
    (cond ((> x-l 0)
           (cond ((> y-l 0)
                  (make-interval (* x-l y-l)
                                 (* x-u y-u)))
                 ((< y-u 0)
                  (make-interval (* x-u y-l)
                                 (* x-l y-u)))
                 (else
                  (make-interval (* x-u y-l)
                                 (* x-u y-u)))))
          ((< x-u 0)
           (cond ((> y-l 0)
                  (make-interval (* x-l y-u)
                                 (* x-u y-l)))
                 ((< y-u 0)
                  (make-interval (* x-u y-u)
                                 (* x-l y-l)))
                 (else
                  (make-interval (* x-l y-u)
                                 (* x-l y-l)))))
          (else
           (cond ((> y-l 0)
                  (make-interval (* x-l y-u)
                                 (* x-u y-u)))
                 ((< y-u 0)
                  (make-interval (* x-u y-l)
                                 (* x-l y-l)))
                 (else
                  (make-interval (min (* x-u y-l) (* x-l y-u))
                                 (max (* x-u y-u) (* x-l y-l)))))))))
