带有显式分派的通用型操作：
使用这种方式容易产生命名冲突，
而且在添加新的类型或者操作的时候，
需要对所有的通用型操作进行改写。
因此该方式的“可加性”最差，
不适合实现需要经常添加新的类型或者操作的系统。

数据导向的风格：
这种方式用定义内部方法的方式避免的命名冲突问题，
把数据每个数据类型的操作都定义在各自的包中，
在用一张类型与操作名构成的“表”来定义通用操作，
“可加性”最好，适合于需要添加新的类型或者操作的系统。

消息传递的风格：
这种方式将数据类型定义为对其本身的各种操作的集合，
因此很适合于需要经常添加新的类型的系统，
但是在添加新的操作时，由于需要重新改写并且加载既存的所有类型，
因此不是很适合于需要经常添加新的操作的系统。
