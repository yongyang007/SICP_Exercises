(add-load-path "./")
(load "exercise_2_67.scm")

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (define (encode-symbol-1 current-branch)
    (if (leaf? current-branch)
        '()
        (let ((left (left-branch current-branch))
              (right (right-branch current-branch)))
          (cond ((element-of-set? symbol (symbols left))
                 (cons 0 (encode-symbol-1 left)))
                ((element-of-set? symbol (symbols right))
                 (cons 1 (encode-symbol-1 right)))
                (else (error "bad symbol -- ENCODE-SYMBOL" symbol))))))
  (encode-symbol-1 tree))
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((eq? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))

(define sample-symbol '(A D A B B C A))

(encode sample-symbol sample-tree)
