(add-load-path "./")
(load "serializer.scm")

;; a. in terms of mutexes
(define (make-semaphore n)
  (let ((mutex (make-mutex))
        (counter 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (cond ((< counter n)
                    (set! (+ counter 1) counter)
                    (mutex 'release))
                   (else
                    (mutex 'release)
                    (the-semaphore 'acquire)))) ; retry
            ((eq? m 'release)
             (mutex 'acquire)
             (if (> counter 0) (set! (- counter 1) counter))
             (mutex 'release))))
    the-semaphore))

;; b. in terms of atomic test-and-set! operations
(define (make-semaphore n)
  (let ((cell (list #f))
        (counter 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire))
             (if (< counter n)
                 (begin (set! (+ counter 1) counter)
                        (clear! cell))
                 (begin (clear! cell)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (if (test-and-set! cell)
                 (the-semaphore 'release))
             (if (> counter 0) (set! (- counter 1) counter))
             (clear! cell))))
    the-semaphore))
