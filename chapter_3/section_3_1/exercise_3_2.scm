(define (make-monitored f)
  (let ((count 0))
    (lambda args
      (cond ((eq? (car args) 'how-many-calls?)
             count)
            ((eq? (car args) 'reset-count)
             (set! count 0)
             count)
            (else
             (set! count (+ count 1))
             (eval (cons f args)
                   (interaction-environment)))))))

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 4)
(s 'how-many-calls?)
(s 'reset-count)
(s 'how-many-calls?)
(s 9)
(s 'how-many-calls?)

(define add (make-monitored +))
(add 'how-many-calls?)
(add 1 2 3)
(add 2 3 4)
(add 'how-many-calls?)
(add 'reset-count)
