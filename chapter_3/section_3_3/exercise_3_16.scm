(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
;; 这一过程的错误之处在于，它只是去递归计算序对的car和cdr所指向的内容，却没有判断这些内容是否已经计数过了

;;        -----    -----
;; s1---->|.|.|--->|/|/|
;;        -----    -----
;;         |   -----
;;         --->|/|/|
;;             -----
(define s1 (cons (cons '() '()) (cons '() '())))
(count-pairs s1) ; => 3

;;        -----       -----
;; s2---->|.|.|------>|/|/|
;;        -----   |   -----
;;         |      |
;;         |   -----
;;         --->|/|.|
;;             -----
(define s2
  (let ((p1 (cons '() '()))
        (p2 (cons '() '())))
    (set-cdr! p2 p1)
    (cons p1 p2)))
(count-pairs s2) ; => 4

;;        -----         -----
;; s3---->|.|.|   ----->|/|/|
;;        -----   | |   -----
;;         | |    | |
;;         | |   -----
;;         ----->|.|.|
;;               -----
(define s3
  (let ((p1 (cons '() '()))
        (p2 (cons '() '()))
        (p3 (cons '() '())))
    (set-car! p1 p2)
    (set-cdr! p1 p2)
    (set-car! p2 p3)
    (set-cdr! p2 p3)
    p1))
(count-pairs s3) ; => 7

;;        -----    -----    -----
;; s4---->|/|.|--->|/|.|--->|/|.|
;;     ^  -----    -----    -----
;;     |                       |
;;     |-----------------------|
(define s4
  (let ((p1 (cons '() '()))
        (p2 (cons '() '()))
        (p3 (cons '() '())))
    (set-cdr! p1 p2)
    (set-cdr! p2 p3)
    (set-cdr! p3 p1)
    p1))
(count-pairs s4) ;=> 死循环，不返回值
